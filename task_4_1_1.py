# 1. Проанализировать скорость и сложность одного любого алгоритма из разработанных в рамках домашнего задания первых трех уроков.
# Примечание. Идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать,
# b. написать 3 варианта кода (один у вас уже есть),
# c. проанализировать 3 варианта и выбрать оптимальный,
# d. результаты анализа вставить в виде комментариев в файл с кодом (не забудьте указать, для каких N вы проводили замеры),
# e. написать общий вывод: какой из трёх вариантов лучше и почему.


# 1. В диапазоне натуральных чисел от 2 до n определить, сколько из них кратны каждому из чисел в диапазоне
# от 2 до 9. Примечание: 8 разных ответов.

import cProfile

def multiplicity(n):
    print(f'Количество чисел от 2 до {n}, кратных 2,3,4,5,6,7,8,9, соответственно: {[n // 2, n // 3, n // 4, n // 5, n // 6, n // 7, n // 8, n // 9]}')
# n = 99
#1000 loops, best of 5: 1.43 msec per loop
# n = 1000
#1000 loops, best of 5: 2.01 msec per loop
# n = 10000
# 1000 loops, best of 5: 2.08 msec per loop

cProfile.run('multiplicity(10000)')



