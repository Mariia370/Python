#1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках
#первых трех уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
#Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
#a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
#b. написать 3 варианта кода (один у вас уже есть);
#проанализировать 3 варианта и выбрать оптимальный;

#c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом. Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
#d. написать общий вывод: какой из трёх вариантов лучше и почему.

#Выбрана задача:
#Написать программу сложения и умножения двух шестнадцатеричных чисел. При этом каждое число представляется
#как массив, элементы которого — цифры числа.


from collections import OrderedDict
import sys

def show_size(my_obj):
    print(f'type: {my_obj.__class__}, size: {sys.getsizeof(my_obj)}, object: {my_obj}')

my_table_1 = OrderedDict()
my_table_2 = OrderedDict()
letters = '0123456789ABCDEF'
for i in range(16):
    my_table_1[letters[i]] = i
    my_table_2[i] = letters[i]
show_size(my_table_1)

def get_numb_10(numb):
    num_10 = 0
    for i in range(0, len(numb)):
        n = len(numb) - i - 1
        print(f"{my_table_1.get(numb[n])} * (16 ** {i})")
        num_10 += my_table_1.get(numb[n]) * (16 ** i)
    return num_10

def get_numb_16(num_10):
    num_16 = []

    while num_10 > 15:
        num_16.append(my_table_2.get(num_10 % 16))
        num_10 = num_10 // 16
    num_16.append(my_table_2.get(num_10))

    return num_16[::-1]

numb_1 = list(input("Введите первое число в шестадцатеричной системе счисления: "))
numb_2 = list(input("Введите второе в шестадцатеричной системе счисления: "))
show_size(numb_1)


add_numbers = get_numb_16(get_numb_10(numb_1)+get_numb_10(numb_2))
mult_numbers = get_numb_16(get_numb_10(numb_1)*get_numb_10(numb_2))
print("Результат сложения чисел:", add_numbers)
print("Результат умножения чисел:", mult_numbers)

# В данной реализации цифры числа в шестнадцатеричной системы счисления хранятся в виде списков
#Размер словаря, в котором хранились пары цифр в десятиричной и шестнадцатиричной системах счисления:
#type: <class 'collections.OrderedDict'>, size: 1472, object: OrderedDict([('0', 0), ('1', 1), ('2', 2), ('3', 3), ('4', 4), ('5', 5), ('6', 6), ('7', 7), ('8', 8), ('9', 9), ('A', 10), ('B', 11), ('C', 12), ('D', 13), ('E', 14), ('F', 15)])

# Размер списка, хранящего цифры числа в шестнадцатиричной системе счисления:
# type: <class 'list'>, size: 72, object: ['A', '2']


